// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SessionService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class SessionService
{
  static readonly string __ServiceName = "SessionService";

  static readonly grpc::Marshaller<global::ConnectionRequestMessage> __Marshaller_ConnectionRequestMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConnectionRequestMessage.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::ConnectionResponseMessage> __Marshaller_ConnectionResponseMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConnectionResponseMessage.Parser.ParseFrom);

  static readonly grpc::Method<global::ConnectionRequestMessage, global::ConnectionResponseMessage> __Method_RequestConnection = new grpc::Method<global::ConnectionRequestMessage, global::ConnectionResponseMessage>(
      grpc::MethodType.Unary,
      __ServiceName,
      "RequestConnection",
      __Marshaller_ConnectionRequestMessage,
      __Marshaller_ConnectionResponseMessage);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::SessionServiceReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of SessionService</summary>
  [grpc::BindServiceMethod(typeof(SessionService), "BindService")]
  public abstract partial class SessionServiceBase
  {
    public virtual global::System.Threading.Tasks.Task<global::ConnectionResponseMessage> RequestConnection(global::ConnectionRequestMessage request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for SessionService</summary>
  public partial class SessionServiceClient : grpc::ClientBase<SessionServiceClient>
  {
    /// <summary>Creates a new client for SessionService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public SessionServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for SessionService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public SessionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected SessionServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected SessionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::ConnectionResponseMessage RequestConnection(global::ConnectionRequestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RequestConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::ConnectionResponseMessage RequestConnection(global::ConnectionRequestMessage request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_RequestConnection, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::ConnectionResponseMessage> RequestConnectionAsync(global::ConnectionRequestMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RequestConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::ConnectionResponseMessage> RequestConnectionAsync(global::ConnectionRequestMessage request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_RequestConnection, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override SessionServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new SessionServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(SessionServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_RequestConnection, serviceImpl.RequestConnection).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, SessionServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_RequestConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ConnectionRequestMessage, global::ConnectionResponseMessage>(serviceImpl.RequestConnection));
  }

}
#endregion
